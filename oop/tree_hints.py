class Node:
    # Это класс узла.
    def __init__(self, data=u''):
        # Как хранить информацию о том, кто чей родитель?
        # Можно в каждом узле записывать, кто является его родителем
        # и кто является его детьми. (Хватило бы любого из этих пунктов
        # в одиночку, но удобнее, когда есть и то, и то.)
        self.parent = None
        self.children = []
        self.data = data # Допустим, в узде хранится одна какая-то строка.
        
    def add_node(self, data=u''):
        # Можно сделать функцию "добавить новый узел с каким-то содержимым
        # к данному узлу". Она должна создать новый узел, записать его
        # в массив детей данного узла и, наоборот, записать в переменную
        # parent нового узла ссылку на данный узел.
        childNode = Node(data)
        childNode.parent = self
        self.children.append(childNode)
        # Нужно ли возвращать новый узел, зависит от того,
        # как эта функция будет использоваться:
        return childNode

    # Если хотите, можно ещё сделать функцию delete_from_tree(self, tree),
    # которая удаляет данный узел из дерева tree.

        

class Tree:
    def __init__(self):
        self.root = Node() # В классе дерева неплохо бы хранить ссылку на корень
        # А ещё можно сделать так, чтобы у каждого узла дерева был уникальный
        # идентификатор, по которому узел можно быстро найти. Для этого можно
        # завести словарь, где ключами будут идентификаторы, а значениями --
        # узлы.

    # Ещё тут должны быть функции add_node (которая, наверно, будет находить
    # нужный узел и вызывать функцию add_node из него), delete_node и что-нибудь
    # ещё, вроде поиска.


